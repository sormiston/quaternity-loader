@use "sass:meta" as meta;
@use "sass:list" as list;
@use "sass:string" as string;

@function transform-polygon($points, $dx, $dy) {
  // Initialize an empty list for the transformed points
  $transformed-points: (
  );

@each $coords in $points {
  // Split the point into x and y coordinates

  $x: list.nth($coords, 1); // x-coordinate
  $y: list.nth($coords, 2); // y-coordinate

  // Apply the x and y deltas
  $new-x: $x + $dx;
  $new-y: $y + $dy;

  // Combine the new x and y into a point
  $transformed-point: #{$new-x} #{$new-y};

  // Add the transformed point to the list
  $transformed-points: list.append($transformed-points, $transformed-point, comma);
}

// Return the transformed points as a polygon string
@return polygon(#{$transformed-points});
};

$start-point-clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
$end-point-clip-path: polygon(0% 0%, 50% 0%, 50% 50%, 0% 50%);
$animation-duration: 2s;

* {
  box-sizing: content-box;
}

body {
  margin: 0;
}

.canvas {
  width: 100vw;
  height: 100vh;
  position: relative;
}

.odds,
.evens {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.circle {
  position: absolute;
  width: 15px;
  height: 15px;
  border: 5px solid black;
  top: 50%;
  left: 50%;
  border-radius: 100%;
  transform: translate(-50%, -50%);
  // clip-path: transform-polygon(((0% 0%), (50% 0%), (50% 50%), (100% 50%), (100% 100%), (0% 100%)), -50%, -50%);

  // clip-path: polygon(0% 0%, 0% 100%, 100% 100%, 0% 0%);
  animation: circle-to-quarter-arc-clip-paths $animation-duration 1s cubic-bezier(.37, .41, .27, .98) infinite alternate;

  &:nth-child(1) {}

  &:nth-child(2) {
    width: 30px;
    height: 30px;
    // transform: translate(-50%, -50%) rotate(90deg);
    transform: rotate(90deg);
  }

  &:nth-child(3) {
    width: 45px;
    height: 45px;
    // transform: translate(-50%, -50%) rotate(180deg);
    transform: rotate(180deg);
  }

  &:nth-child(4) {
    width: 60px;
    height: 60px;
    // transform: translate(-50%, -50%) rotate(270deg);
    transform: rotate(270deg);
  }
}

.odds {
  animation: rotate-odds $animation-duration * 4 1s cubic-bezier(.37, .41, .27, .98) infinite;

  .circle:nth-child(2) {
    width: 45px;
    height: 45px;
    transform: translate(-50%, -50%) rotate(180deg);
    // transform: rotate(180deg);
    
  }
}

.evens {
  .circle:nth-child(1) {
    width: 30px;
    height: 30px;
    transform: translate(-50%, -50%) rotate(90deg);
    // transform: rotate(90deg);
  }

  .circle:nth-child(2) {
    width: 60px;
    height: 60px;
    transform: translate(-50%, -50%) rotate(270deg);
    // transform: rotate(270deg);
  }
}

@keyframes circle-to-quarter-arc-clip-paths {
  0% {
    // clip-path: transform-polygon(((0% 0%), (0% 100%), (100% 100%), (0% 0%), (0% 0%)), 0%, 0%);
    clip-path: $start-point-clip-path;
    // clip-path: inset(0);
    // transform-origin: -50% -50%;
    // scale: 7;
  }

  75% {
    clip-path: $end-point-clip-path;
  }

  100% {
    clip-path: $end-point-clip-path;
  }
}

@keyframes rotate-odds {
  0% {
    transform: rotate(0deg);
  }

  18.75% {
    transform: rotate(0deg);
  }

  25% {
    transform: rotate(90deg);
  }

  37.5% {
    transform: rotate(90deg);
  }

  50% {
    transform: rotate(180deg);
  }

  68.75% {
    transform: rotate(180deg);
  }

  75% {
    transform: rotate(270deg);
  }

  93.75% {
    transform: rotate(270deg);
  }

  100% {
    transform: rotate(360deg);
  }
}